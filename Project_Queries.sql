USE CAMPUS__RECRUITMENT_SYSTEM;

---------------------------------------------------------------------------------------------------------------------------------------

--FUNCTION 1:

-- User Defined Function to count the number of jobs student has applied to:
CREATE FUNCTION CountPlacementAppliedByStudent(@Student_ID int)
	RETURNS int
	AS
	BEGIN
	DECLARE @count int
	SELECT @count = COUNT(p.PLACEMENT_LISTING_ID) 
	FROM PlacementApplication p
	WHERE p.Student_ID = @Student_ID
	GROUP BY Student_ID 
	SET @count = ISNULL(@count,0)
	RETURN @count
	END
    GO

-- ALTERING THE TABLE TO ADD THE TOTAL PLACEMENT COUNTS IN STUDENTPROFILE TABLE:
ALTER TABLE StudentProfile ADD PlacementAppliedCounts AS dbo.CountPlacementAppliedByStudent(Student_ID);

SELECT * FROM STUDENTPROFILE;

--FUNCTION 2:

--CREATING FUNCTION TO FIND THE STATUS OF STUDENTS WHO HAS WORKED FOR CORRESPONDING COMPANIES:
CREATE FUNCTION WORKEX_STATUS(@STUDENT_ID INT)
RETURNS TABLE 
AS
RETURN 
SELECT STUDENT_ID, COMPANY_NAME,IsCurrent_Status
FROM StudentWorkEx
WHERE @STUDENT_ID=STUDENT_ID
GO

--EXECUTING THE FUNCTION TO FIND THE STATUS OF COMPANIES WORKED FOR:
SELECT  * FROM WORKEX_STATUS(1);


--------------------------------------------------------------------------------------------------------------------------------------------
--VIEW 1:
--CREATE VIEW FOR ALL STUDENTDETAILS:

CREATE VIEW STUDENTDETAILS
AS
SELECT L.LOGIN_ID,CONCAT(S.STUDENT_FNAME,' ',S.STUDENT_LNAME) AS NAME,L.EMAIL_ID,L.PASSWORD,L.PHONE_NO,SE.GPA,D.MAJOR
FROM LoginPortal L
JOIN StudentProfile S
ON L.LOGIN_ID= S.LOGIN_ID
JOIN StudentEducation SE
ON S.STUDENT_ID= SE.STUDENT_ID
JOIN Degree D
ON SE.DEGREE_ID= D.DEGREE_ID
GO

SELECT * FROM STUDENTDETAILS;

--VIEW 2:

---FINDING MATCH FOR THE SKILLS ACQUIRED AND REQUIRED FOR THE JOB:
-- IF OUTPUT APPEARS: MEANS ELIGIBLE FOR THE JOB(S)

CREATE VIEW SKILLMATCHES
AS
SELECT CONCAT(S.STUDENT_FNAME,' ',S.STUDENT_LNAME) AS NAME,SSS.SKILL_NAME,O.ORGANIZATION_NAME, PT.PLACEMENT_TYPE FROM STUDENTPROFILE S
JOIN PLACEMENTAPPLICATION PA 
ON S.STUDENT_ID= PA.STUDENT_ID
JOIN PLACEMENT_LISTING PL
ON PL.PLACEMENT_LISTINGID= PA.PLACEMENT_LISTING_ID
JOIN PLACEMENT_TYPE PT
ON PT.PLACEMENT_TYPE_ID= PL.PLACEMENT_TYPE_ID
JOIN ORGANIZATION O
ON O.ORGANIZATION_ID= PL.ORGANIZATION_ID
JOIN STUDENTSKILLSETS SS
ON SS.STUDENT_ID = S.STUDENT_ID
JOIN PLACEMENTPOSTINGSKILL PSS
ON PSS.PLACEMENTLISTINGID= PL.PLACEMENT_LISTINGID
JOIN SKILLS SSS
ON SSS.SKILL_ID= PSS.SKILL_ID
WHERE PSS.SKILL_ID= SS.SKILL_ID AND CONCAT(S.STUDENT_FNAME,' ',S.STUDENT_LNAME)= 'HETAL GADA'

GO

SELECT * FROM [SKILLMATCHES];

--VIEW 3:

-- CREATE VIEW FOR STUDENTS WHO HAS APPLIED TO OFF CAMPUS JOBS:
CREATE VIEW [STUDENT APPLIED OFFCAMPUS]
AS

SELECT PA.STUDENT_ID,CONCAT(S.STUDENT_FNAME,' ',S.STUDENT_LNAME)AS NAME, O.ORGANIZATION_NAME FROM ORGANIZATION O
JOIN PLACEMENT_LISTING PL 
ON O.ORGANIZATION_ID= PL.ORGANIZATION_ID
INNER JOIN PLACEMENTAPPLICATION PA 
ON PL.PLACEMENT_LISTINGID= PA.PLACEMENT_LISTING_ID
INNER JOIN STUDENTPROFILE S
ON S.STUDENT_ID= PA.STUDENT_ID
WHERE O.LOGIN_ID LIKE '%OFF%'

GO

SELECT * FROM [STUDENT APPLIED OFFCAMPUS];



--------------------------------------------------------------------------------------------------------------------------------------------
--STORED PROCEDURES 1:

--UPDATING THE VALUES IN ORGANIZATION FEEDBACK TABLE USING STORED PROCEDURE:
CREATE PROCEDURE UPDATESCALINGRATING
(
    @STUDENT_ID INT,
    @SCALING_RATING DECIMAL,
    @ORGANIZATION_ID INT
)
AS
BEGIN
UPDATE ORGANIZATION_FEEDBACK
    SET SCALING_RATING= @SCALING_RATING
    WHERE STUDENT_ID= @STUDENT_ID AND ORGANIZATION_ID= @ORGANIZATION_ID
END
 

EXEC UPDATESCALINGRATING @STUDENT_ID = 2,@ORGANIZATION_ID= 204, @SCALING_RATING = 3.2;

-- ROUNDING OFF THE VALUE OF DECIMALS OF SCALING RATING IN ORGANIZATION FEEDBACK TO CHECK THE OUTPUT:

SELECT * FROM ORGANIZATION_FEEDBACK
WHERE STUDENT_ID=2 AND ORGANIZATION_ID= 204;




--STORED PROCEDURE 2:


--STORED PROCEDURE TO FIND ALL THE STUDENTS WHO HAS APPLIED TO 'DELOITTE' FOR 'SOFTWARE DEVELOPER ROLE' WITH APPLIED DATE:

CREATE PROCEDURE GETDELOITTESOFTWARE @ORGANIZATIONID INT, @PLACEMENTTYPEID INT
AS
BEGIN
SELECT CONCAT(S.STUDENT_FNAME,' ', S.STUDENT_LNAME) AS 'STUDENT NAME',L.EMAIL_ID,O.ORGANIZATION_NAME, PT.PLACEMENT_TYPE,PA.APPLYDATE FROM PLACEMENTAPPLICATION PA
INNER JOIN PLACEMENT_LISTING PL ON PA.PLACEMENT_LISTING_ID = PL.PLACEMENT_LISTINGID
INNER JOIN ORGANIZATION O ON PL.ORGANIZATION_ID= O.ORGANIZATION_ID
INNER JOIN STUDENTPROFILE S ON S.STUDENT_ID= PA.STUDENT_ID
INNER JOIN LOGINPORTAL L ON L.LOGIN_ID= S.LOGIN_ID
INNER JOIN PLACEMENT_TYPE PT ON PT.PLACEMENT_TYPE_ID= PL.PLACEMENT_TYPE_ID
WHERE PL.PLACEMENT_TYPE_ID= @PLACEMENTTYPEID AND O.ORGANIZATION_ID= @ORGANIZATIONID
END

EXEC GETDELOITTESOFTWARE 101,1;



--STORED PROCEDURE 3:

--CREATING PROCEDURE TO FIND STUDENTS WITH REQUIRED SKILLSETS:

CREATE PROCEDURE [STUDENT_SKILLSET] @SKILL_NAME VARCHAR(300)
AS
BEGIN
SELECT CONCAT(S.STUDENT_FNAME,' ',S.STUDENT_LNAME), SS.SKILL_NAME FROM STUDENTPROFILE S
INNER JOIN STUDENTSKILLSETS SSS ON S.STUDENT_ID = SSS.STUDENT_ID
INNER JOIN SKILLS SS ON SS.SKILL_ID= SSS.SKILL_ID
WHERE SS.SKILL_NAME= @SKILL_NAME
END

EXEC [STUDENT_SKILLSET] 'CLOUD COMPUTING'

-------------------------------------------------------------------------------------------------------------------------------------------
--CREATING NON CLUSTERED KEY INDEXES ON THE TABLES:


CREATE NONCLUSTERED INDEX STUD_FNAME
ON STUDENTPROFILE(STUDENT_FNAME ASC);

CREATE NONCLUSTERED INDEX P_LISTING_DATE
ON PLACEMENT_LISTING(LISTING_DATE);

CREATE NONCLUSTERED INDEX O_ORGANIZATION_ID
ON ORGANIZATION_FEEDBACK(ORGANIZATION_ID ASC);

-------------------------------------------------------------------------------------------------------------------------------------------


--TRIGGER 1:  FOR UPDATE ON DEGREE'S MAJOR:

CREATE TABLE DEGREES_LOG (
      LOG_ID INT IDENTITY(1,1) UNIQUE NOT NULL,
	  MAJOR varchar(255),
      ACTION VARCHAR (255)
	);

CREATE TRIGGER DEGREE_UPDATE
ON
DEGREE
AFTER UPDATE 
AS
BEGIN
DECLARE @MAJOR VARCHAR (255)
SET @MAJOR =(SELECT MAJOR FROM INSERTED)

INSERT INTO DEGREES_LOG VALUES (@MAJOR, 'UPDATE')


END


UPDATE DEGREE
SET MAJOR ='INFORMATION TECHNOLOGY'
WHERE DEGREE_ID=1


SELECT * FROM DEGREES_LOG;
--


--TRIGGER 2: UPDATING ORGANZATION TABLE USING AUDIT TABLE:

CREATE TABLE [ORG_AUDIT](
       [ORG_AUDIT_ID] int not null primary key identity(1,1),
      [Organization_ID] INT,
      [Login_ID] varchar(30) NOT NULL,
      [Organization_Name] varchar(200) NOT NULL,
      [OrganizationWebsiteURL] varchar(200),
      [Action] char(1),
      [ActionDate] datetime
    )
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--- This trigger captures changes ORGANIZATION TABLE 

CREATE TRIGGER ORGANIZATION_HISTORY
   ON  ORGANIZATION
  FOR UPDATE
AS 
BEGIN
declare @action char(1)
SET @action = 'U'
INSERT INTO  ORG_AUDIT ( 
    [Organization_ID],
    [Login_ID],
    [Organization_Name],
    [OrganizationWebsiteURL],
    [Action],
    [ActionDate]
)

  SELECT [Organization_ID],
   [Login_ID],
    [Organization_Name],
    [OrganizationWebsiteURL],
    @action,
    GETDATE()
   FROM DELETED
END
GO

SELECT * 
FROM ORGANIZATION WHERE ORGANIZATION_ID= 101;

UPDATE ORGANIZATION SET [ORGANIZATION_NAME]= 'AMAZON' WHERE ORGANIZATION_ID= 101;

select * FROM ORG_AUDIT

--AGAIN CHECK FOR THE OUTPUT:
SELECT * 
FROM ORGANIZATION WHERE ORGANIZATION_ID= 101;

---TRIGGER 3: UPDATE STUDENT'S FIRST NAME WITH LOGS:

CREATE TABLE [dbo].[StudentNameChangeHistory](
    [StudentNameChangeHistory] int not null primary key identity(1,1),
[student_id] [int] NOT NULL,
[O_Student_FName] varchar(300),
[N_Student_FName] varchar (300),
ChangeDate datetime null
);
--------------

CREATE TRIGGER StudentNameChange
   ON  dbo.StudentProfile
  FOR UPDATE
AS 
BEGIN
IF UPDATE(student_fname) -- only interested in specific change
  begin
INSERT INTO  [StudentNameChangeHistory] ( 
[student_id] ,
[O_Student_FName] ,
[N_Student_FName] ,
ChangeDate )
  SELECT d.student_id
  ,d.student_fname
  ,i.student_fname,
  GETDATE()
   FROM DELETED d join INSERTED i on d.student_id = i.student_id
end
END
GO

select *
from dbo.studentprofile WHERE student_id= 2

update studentprofile set student_fname ='YASH' WHERE student_id= 1

select * from [StudentNameChangeHistory]

--TRIGGER 4:  FORMED FOR UPDATED STUDENT'S LATEST JOB:

CREATE TRIGGER STUDENTLATESTJOBLOGS
ON STUDENTPROFILE
AFTER INSERT
AS
BEGIN
    DECLARE @STUDENT_ID INT;
    SET @STUDENT_ID =(SELECT STUDENT_ID FROM INSERTED);
    INSERT INTO STUDENTLOGS VALUES (@STUDENT_ID, GETDATE(), GETDATE())

    END 
    GO


-------------------------------------------------------------------------------------------------------------------------------------------

--STUDENTS SKILLSETS: (USING TEMPORARY TABLE)

SELECT DISTINCT CONCAT(S.STUDENT_FNAME,' ',S.STUDENT_LNAME) AS NAME,SS.SKILL_ID,SS.SKILL_NAME
INTO #STUDENT_SKILLSETS
FROM STUDENTPROFILE S
JOIN STUDENTSKILLSETS SSS 
ON SSS.STUDENT_ID= S.STUDENT_ID
JOIN SKILLS SS
ON SSS.SKILL_ID= SS.SKILL_ID;

--CREATING TEMP TABLE FOR STUDENT SKILLSETS
SELECT * FROM #STUDENT_SKILLSETS;


--PLACEMENT SKILLSETS ACCORDING TO REQUIREMENTS: (USING TEMPORARY TABLE)

SELECT O.ORGANIZATION_NAME,S.SKILL_NAME, PT.PLACEMENT_TYPE AS 'JOB ROLES'
INTO #PLACEMENT_SKILLS
FROM ORGANIZATION O
JOIN PLACEMENT_LISTING PL
ON PL.ORGANIZATION_ID= O.ORGANIZATION_ID
JOIN PLACEMENTPOSTINGSKILL PSS
ON PL.PLACEMENT_LISTINGID= PSS.PLACEMENTLISTINGID
JOIN SKILLS S
ON PSS.SKILL_ID= S.SKILL_ID
JOIN PLACEMENT_TYPE PT
ON PT.PLACEMENT_TYPE_ID= PL.PLACEMENT_TYPE_ID

--CREATING TEMP TABLE:
SELECT * FROM #PLACEMENT_SKILLS


--PLACEMENTSKILLSETS STUDENTS APPLIED TO: (USING TEMPORARY TABLE)

SELECT DISTINCT CONCAT(S.STUDENT_FNAME,' ',S.STUDENT_LNAME) AS NAME,O.ORGANIZATION_NAME,PA.APPLYDATE,SS.SKILL_NAME AS SKILLSREQUIRED
INTO #PLACEMENTSTUDENT_SKILL
FROM STUDENTPROFILE S
JOIN PLACEMENTAPPLICATION PA
ON S.STUDENT_ID= PA.STUDENT_ID
JOIN PLACEMENT_LISTING PL
ON PA.PLACEMENT_LISTING_ID= PL.PLACEMENT_LISTINGID
JOIN ORGANIZATION O
ON O.ORGANIZATION_ID = PL.ORGANIZATION_ID
JOIN PLACEMENTPOSTINGSKILL PS
ON PL.PLACEMENT_LISTINGID= PS.PLACEMENTLISTINGID
JOIN SKILLS SS
ON SS.SKILL_ID= PS.SKILL_ID
ORDER BY CONCAT(S.STUDENT_FNAME,' ',S.STUDENT_LNAME);

--CREATING TEMP TABLE:
SELECT * FROM #PLACEMENTSTUDENT_SKILL;

----------------------------------------------------------------------------------------------------------------------------------------

--QUERIES TO FIND INSIGHTS:


-- Total job postings by each organization (can be offcampus/oncampus)

    SELECT O.ORGANIZATION_NAME, COUNT(P.PLACEMENT_LISTINGID) AS 'TOTAL LISTINGS'
    FROM ORGANIZATION O
        INNER JOIN PLACEMENT_LISTING P
        ON O.ORGANIZATION_ID=P.ORGANIZATION_ID
        GROUP BY O.ORGANIZATION_ID, O.ORGANIZATION_NAME


--QUERY to find the student ratings and comments:

    SELECT CONCAT(S.STUDENT_FNAME,' ', S.STUDENT_LNAME) AS 'STUDENT NAME', O.ORGANIZATION_NAME,F.SCALING_RATING,F.REVIEW FROM STUDENTPROFILE S
    JOIN ORGANIZATION_FEEDBACK F
    ON S.STUDENT_ID= F.STUDENT_ID
    JOIN ORGANIZATION O
    ON O.ORGANIZATION_ID = F.ORGANIZATION_ID;



--APPLICATION STATUS OF STUDENTS APPLIED:

SELECT CONCAT(S.STUDENT_FNAME,' ', S.STUDENT_LNAME) AS NAME, 'NOT APPLIED' AS STATUS 
FROM STUDENTPROFILE S WHERE S.STUDENT_ID NOT IN 
(
    SELECT STUDENT_ID FROM PLACEMENTAPPLICATION
)
UNION

SELECT CONCAT(S.STUDENT_FNAME, S.STUDENT_LNAME) AS NAME, 'APPLIED TO MORE THAN 1 JOB' AS STATUS
from STUDENTPROFILE S WHERE S.STUDENT_ID IN 
(
    SELECT STUDENT_ID FROM PLACEMENTAPPLICATION
    group by(STUDENT_ID)
    having count(*)>1
)
UNION
SELECT CONCAT(S.STUDENT_FNAME, S.STUDENT_LNAME) AS NAME, 'APPLIED TO 1 JOB' AS STATUS
from STUDENTPROFILE S WHERE S.STUDENT_ID IN 
(
    SELECT STUDENT_ID FROM PLACEMENTAPPLICATION
    group by(STUDENT_ID)
    having count(*)=1
)







